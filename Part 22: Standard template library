//1. continuous/ container
//2. iterator
//3. algorithm

//1. Operator<< as a friend function template:
template <typename T> /* File: array-w-os-friend.h */
class Array
{
template <typename S>
//       ------------  
friend ostream& operator<<(ostream& os, const Array<S>& x);
//                                      ------------------- this function has a parameter that is a template
// so you need to put another typename only for this guy
private:
T* _value;
int _size;
};

//2. Operation: resize(int new_size) : change size of the sequence:
include<vector>
int main(){
vector<int> v;
v.push_back(20);
v.push_back(10);
v.push_back(30);
for(int i=0;i<v.size();++i)
  cout<<v[i]<<endl;
v.resize(10); // you want to control the number of elements in the vector 
// now your vector has 10 elements, and the remaining 7 are zeros
// if you resize vector less than number it has, so the elements got removed
// supscript only use for access elements

//3. STL Iterators: 
vector<int>::iterator p;
//-container::interator ---
// iterator is a type (a class) that is embedded in vector template
// p is used to point at element container
for(p=v.begin();p!=v.end();++p)
  cout<<*p<<endl;

//v.end doesnt give you the address of the last element, v.end() gives you the address of the location 
// after the last one.

//1. container: class template
// 2. iterator: class inside class template
//3. algorithm: function template
  
  
  
  
  
  
