// the most difficult question in this part:
#include<iostream>
using namespace std;

int i;
  
class A
{
  public:
    ~A() { i = 10; }
};
  
int foo()
// HOWEVER if you change to int& foo(); the return value is 10
{
    i = 3;
    A x;
    return i;
}
  
int main()
{
    cout << foo() << endl;
    return 0;
}

//****************** 3
While returning from a function, destructors are the last methods to be executed. 
The destructor for the object "x" is called after the value of i is copied to the return value of the function. 
So, before destructor could change the value of i to 10, the current value of i gets copied to the main( ) function already.


//************ question 1:
#include <iostream>

class A
{
  public:
    A(int n = 0) : m(n) { std::cout << 'd'; } 
    A(const A& a) : m(a.m) { std::cout << 'c'; }

  private:
    int m;
};

void f(const A& a1, const A& a2 = A()) { }

int main()
{
    A a(2), b;
    const A c(a), &d = c, e = b;
    b = d;
    A* p = new A(c), *q = &a;
    static_cast < void >(q);
    delete p;
    f(3);
    std::cout << std::endl;

    return 0;
}


//**************** answer:
ddcccdd
//**************** copy constructor:
Conceptually a copy constructor may be called in following cases:
When an object of the class is returned by value.
When an object of the class is passed (to a function) by value as an argument.
When an object is constructed based on another object of the same class.
When compiler generates a temporary object.
It is, however, not guaranteed that a copy constructor will be called in all these cases, 
because the C++ Standard allows the compiler to optimize the copy away in certain cases, 
one example being the return value optimization (sometimes referred to as RVO).

//***********question 2:
A class must provide at least one constructor.
A default constructor is a constructor with no formal parameters in its parameter list.
If there are no meaningful default values for a class, the class should not provide a default constructor.
We can have more than one constructor in a class, as long as each has a different list of arguments.
Solution
A, B and C are not true. 
A is not true; even if no constructor of any kinds are provided, the compiler still will give you a default constructor. 
B is not true (this is a tricky question);
e.g., Word( ){ frequency = 0; str = 0; } is still a default constructor though its parameter list consists of 2 variables 
because it may be called with no arguments due to the use of defaults values for both formal parameters. 
C is not true, constructor may assign default values to object, indicating that the object has invalid initial values.

//********** questions 3:
#include<iostream>
using namespace std;

class Point
{
    Point() { cout << "Constructor called"; }
};
 
int main()
{
   Point x;
   return 0;
}

//******** Compilation error:
By default all members of a class are private. 
Since no access specifier is there for Point( ), it is private and it can't be called outside the class when x is constructed in main( ). 
So the compiler will issue an error message something like "calling a private constructor of class Point".

//***** question 4:
#include<iostream>
using namespace std;

class X 
{
  public:
    int x;
};
 
int main()
{
    X a = { 10 };
    X b = a;
    cout << a.x << " " << b.x;
    return 0;
}
// **** 10 10

//************* question 5:
#include<iostream>
using namespace std;

class Test
{
  public:
      Test() { cout << "Hello from Test() "; }
} a;
//----//
 
int main()
{
    cout << "Main Started ";
    return 0;
}

//******** Hello from Test() Main Started

//********question 6: copy constructor:
#include<iostream>
using namespace std;

class Point
{
    int x;
  public:
    Point(int x) { this->x = x; }
    Point(const Point p) { x = p.x;}
    int getX() { return x; }
};
 
int main()
{
   Point p1(10);
   Point p2 = p1;
   cout << p2.getX();
   return 0;
}
//*********** Compilation error: p must be passed by reference

//************question 7: automatically call conversion constructor:
#include<iostream>
using namespace std;

class Test
{
  private:
    int x;
  public:
    Test(int i)
    {
        x = i;
        cout << "conversion ";
    }
};
 
int main()
{
    Test t(20);
    t = 30;
    return 0;
}
//***** conversion conversion

